//       _________ __                 __
//      /   _____//  |_____________ _/  |______     ____  __ __  ______
//      \_____  \\   __\_  __ \__  \\   __\__  \   / ___\|  |  \/  ___/
//      /        \|  |  |  | \// __ \|  |  / __ \_/ /_/  >  |  /\___ |
//     /_______  /|__|  |__|  (____  /__| (____  /\___  /|____//____  >
//             \/                  \/          \//_____/            \/
//  ______________________                           ______________________
//                        T H E   W A R   B E G I N S
//         Stratagus - A free fantasy real time strategy game engine
//
/**@name mpq.c - Mpq. */
//
//      (c) Copyright 1998-2012 by Lutz Sammer, Jimmy Salmon and Pali Roh√°r
//
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; version 2 dated June, 1991.
//
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
//      02111-1307, USA.
//
//      $Id$

//@{

/*----------------------------------------------------------------------------
--		Includes
----------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#ifdef _MSC_VER
#define strdup _strdup
#define DEBUG _DEBUG
#define PATH_MAX _MAX_PATH
#include <direct.h>
#include <io.h>
#else
#include <limits.h>
#include <unistd.h>
#endif
#include <ctype.h>

#include "mpq.h"



/*----------------------------------------------------------------------------
--		Declarations
----------------------------------------------------------------------------*/


/*----------------------------------------------------------------------------
--  Functions
----------------------------------------------------------------------------*/

/**
**  Check if path exists, if not make all directories.
*/
void CheckPath(const char* path)
{
	char* cp;
	char* s;

#ifdef WIN32
	cp = _strdup(path);
#else
	cp = strdup(path);
#endif
	s = strrchr(cp, '/');
	if (s) {
		*s = '\0';  // remove file
		s = cp;
		for (;;) {  // make each path element
			s = strchr(s, '/');
			if (s) {
				*s = '\0';
			}
#if defined(_MSC_VER) || defined(WIN32)
			_mkdir(cp);
#else
			mkdir(cp, 0777);
#endif
			if (s) {
				*s++ = '/';
			} else {
				break;
			}
		}
	}
	free(cp);
}

/**
**  Extract a file from MPQ archive
**
**  @param szArchiveName Path to MPQ file to read from
**  @param szArchivedFile File identifier in the MPQ file
**  @param szFileName Place to save the file on the drive (absolute)
*/
int ExtractMPQFile(const char *szArchiveName, const char *szArchivedFile, const char *szFileName, bool compress)
{
	HANDLE hMpq   = NULL;          // Open archive handle
	HANDLE hFile  = NULL;          // Archived file handle
	FILE   *file  = NULL;          // Disk file handle
	gzFile gzfile = NULL;          // Compressed file handle
	int    nError = ERROR_SUCCESS; // Result value

	// Open an archive, e.g. "d2music.mpq"
	if(nError == ERROR_SUCCESS) {
		if(!SFileOpenArchive(szArchiveName, 0, STREAM_FLAG_READ_ONLY, &hMpq))
			nError = GetLastError();
	}

	// Open a file in the archive, e.g. "data\global\music\Act1\tristram.wav"
	if(nError == ERROR_SUCCESS) {
		if(!SFileOpenFileEx(hMpq, szArchivedFile, 0, &hFile))
			nError = GetLastError();
	}

	// Create the target file
	if(nError == ERROR_SUCCESS) {
		CheckPath(szFileName);
		if (compress) {
			gzfile = gzopen(szFileName, "wb9");
		} else {
			file = fopen(szFileName, "wb");
		}
	}

	// Read the file from the archive
	if(nError == ERROR_SUCCESS) {
		char  szBuffer[0x10000];
		DWORD dwBytes = 1;

		while(dwBytes > 0) {
			SFileReadFile(hFile, szBuffer, sizeof(szBuffer), &dwBytes, NULL);
			if(dwBytes > 0) {
				if (compress) {
					gzwrite(gzfile, szBuffer, dwBytes);
				} else {
					fwrite(szBuffer, 1, dwBytes, file);
				}
			}
		}
	}

	// Cleanup and exit
	if(file != NULL) {
		fclose(file);
	}
	if(gzfile != NULL) {
		gzclose(gzfile);
	}
	if(hFile != NULL)
		SFileCloseFile(hFile);
	if(hMpq != NULL)
		SFileCloseArchive(hMpq);

	return nError;
}

/**
**  Extract a file from MPQ archive
**
**  @param szArchiveName Path to MPQ file to read from
**  @param szArchivedFile File identifier in the MPQ file
**  @param szEntryBuffer Buffer to hold the uncompressed entry
**  @param bufferLen Buffer to hold the uncompressed entry
**
**  @return error code
*/
int ExtractMPQEntry(const char *szArchiveName, const char *szArchivedFile, unsigned char **szEntryBufferPrt, size_t *bufferLen)
{
	HANDLE hMpq   = NULL;          // Open archive handle
	HANDLE hFile  = NULL;          // Archived file handle
	int    nError = ERROR_SUCCESS; // Result value
	unsigned char *szEntryBuffer = NULL;

	if(nError == ERROR_SUCCESS) {
		if(!SFileOpenArchive(szArchiveName, 0, STREAM_FLAG_READ_ONLY, &hMpq))
			nError = GetLastError();
	}

	// Open a file in the archive, e.g. "data\global\music\Act1\tristram.wav"
	if(nError == ERROR_SUCCESS) {
		if(!SFileOpenFileEx(hMpq, szArchivedFile, 0, &hFile))
			nError = GetLastError();
	}

	int i = 0;
	size_t len = 0;
	// Read the file from the archive
	if(nError == ERROR_SUCCESS) {
		char szBuffer[0x10000];
		szEntryBuffer = (unsigned char*) malloc(sizeof(szBuffer));
		DWORD dwBytes = 1;

		while(dwBytes > 0) {
			SFileReadFile(hFile, szBuffer, sizeof(szBuffer), &dwBytes, NULL);
			if(dwBytes > 0) {
				len = len + dwBytes; // TODO old was: sizeof(szBuffer) * (i+1);
				//printf("pcx buffer len: %d\n", len);
				szEntryBuffer = (unsigned char*) realloc(szEntryBuffer, len);
				void *targetBuffer = (unsigned char*) memcpy(szEntryBuffer + (i*sizeof(szBuffer)), szBuffer, dwBytes);

			}
			i++;
		}
	}
	if(bufferLen != NULL)
	{
		*bufferLen = len;
	}

	if(hFile != NULL)
		SFileCloseFile(hFile);
	if(hMpq != NULL)
		SFileCloseArchive(hMpq);

	*szEntryBufferPrt = szEntryBuffer;
	return nError;
}




const unsigned char dcl_table[] =
{
	0x02, 0x04, 0x04, 0x05, 0x05, 0x05, 0x05, 0x06,
	0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
	0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
	0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
	0x03, 0x0D, 0x05, 0x19, 0x09, 0x11, 0x01, 0x3E,
	0x1E, 0x2E, 0x0E, 0x36, 0x16, 0x26, 0x06, 0x3A,
	0x1A, 0x2A, 0x0A, 0x32, 0x12, 0x22, 0x42, 0x02,
	0x7C, 0x3C, 0x5C, 0x1C, 0x6C, 0x2C, 0x4C, 0x0C,
	0x74, 0x34, 0x54, 0x14, 0x64, 0x24, 0x44, 0x04,
	0x78, 0x38, 0x58, 0x18, 0x68, 0x28, 0x48, 0x08,
	0xF0, 0x70, 0xB0, 0x30, 0xD0, 0x50, 0x90, 0x10,
	0xE0, 0x60, 0xA0, 0x20, 0xC0, 0x40, 0x80, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
	0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00,
	0x04, 0x00, 0x05, 0x00, 0x06, 0x00, 0x07, 0x00,
	0x08, 0x00, 0x0A, 0x00, 0x0E, 0x00, 0x16, 0x00,
	0x26, 0x00, 0x46, 0x00, 0x86, 0x00, 0x06, 0x01,
	0x03, 0x02, 0x03, 0x03, 0x04, 0x04, 0x04, 0x05,
	0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x07, 0x07,
	0x05, 0x03, 0x01, 0x06, 0x0A, 0x02, 0x0C, 0x14,
	0x04, 0x18, 0x08, 0x30, 0x10, 0x20, 0x40, 0x00,
	0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
	0x0C, 0x08, 0x07, 0x0C, 0x0C, 0x07, 0x0C, 0x0C,
	0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
	0x0C, 0x0C, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
	0x04, 0x0A, 0x08, 0x0C, 0x0A, 0x0C, 0x0A, 0x08,
	0x07, 0x07, 0x08, 0x09, 0x07, 0x06, 0x07, 0x08,
	0x07, 0x06, 0x07, 0x07, 0x07, 0x07, 0x08, 0x07,
	0x07, 0x08, 0x08, 0x0C, 0x0B, 0x07, 0x09, 0x0B,
	0x0C, 0x06, 0x07, 0x06, 0x06, 0x05, 0x07, 0x08,
	0x08, 0x06, 0x0B, 0x09, 0x06, 0x07, 0x06, 0x06,
	0x07, 0x0B, 0x06, 0x06, 0x06, 0x07, 0x09, 0x08,
	0x09, 0x09, 0x0B, 0x08, 0x0B, 0x09, 0x0C, 0x08,
	0x0C, 0x05, 0x06, 0x06, 0x06, 0x05, 0x06, 0x06,
	0x06, 0x05, 0x0B, 0x07, 0x05, 0x06, 0x05, 0x05,
	0x06, 0x0A, 0x05, 0x05, 0x05, 0x05, 0x08, 0x07,
	0x08, 0x08, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C,
	0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
	0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
	0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
	0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
	0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
	0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
	0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
	0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
	0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
	0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
	0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
	0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
	0x0D, 0x0C, 0x0D, 0x0D, 0x0D, 0x0C, 0x0D, 0x0D,
	0x0D, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0D,
	0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D,
	0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
	0x90, 0x04, 0xE0, 0x0F, 0xE0, 0x07, 0xE0, 0x0B,
	0xE0, 0x03, 0xE0, 0x0D, 0xE0, 0x05, 0xE0, 0x09,
	0xE0, 0x01, 0xB8, 0x00, 0x62, 0x00, 0xE0, 0x0E,
	0xE0, 0x06, 0x22, 0x00, 0xE0, 0x0A, 0xE0, 0x02,
	0xE0, 0x0C, 0xE0, 0x04, 0xE0, 0x08, 0xE0, 0x00,
	0x60, 0x0F, 0x60, 0x07, 0x60, 0x0B, 0x60, 0x03,
	0x60, 0x0D, 0x60, 0x05, 0x40, 0x12, 0x60, 0x09,
	0x60, 0x01, 0x60, 0x0E, 0x60, 0x06, 0x60, 0x0A,
	0x0F, 0x00, 0x50, 0x02, 0x38, 0x00, 0x60, 0x02,
	0x50, 0x00, 0x60, 0x0C, 0x90, 0x03, 0xD8, 0x00,
	0x42, 0x00, 0x02, 0x00, 0x58, 0x00, 0xB0, 0x01,
	0x7C, 0x00, 0x29, 0x00, 0x3C, 0x00, 0x98, 0x00,
	0x5C, 0x00, 0x09, 0x00, 0x1C, 0x00, 0x6C, 0x00,
	0x2C, 0x00, 0x4C, 0x00, 0x18, 0x00, 0x0C, 0x00,
	0x74, 0x00, 0xE8, 0x00, 0x68, 0x00, 0x60, 0x04,
	0x90, 0x00, 0x34, 0x00, 0xB0, 0x00, 0x10, 0x07,
	0x60, 0x08, 0x31, 0x00, 0x54, 0x00, 0x11, 0x00,
	0x21, 0x00, 0x17, 0x00, 0x14, 0x00, 0xA8, 0x00,
	0x28, 0x00, 0x01, 0x00, 0x10, 0x03, 0x30, 0x01,
	0x3E, 0x00, 0x64, 0x00, 0x1E, 0x00, 0x2E, 0x00,
	0x24, 0x00, 0x10, 0x05, 0x0E, 0x00, 0x36, 0x00,
	0x16, 0x00, 0x44, 0x00, 0x30, 0x00, 0xC8, 0x00,
	0xD0, 0x01, 0xD0, 0x00, 0x10, 0x01, 0x48, 0x00,
	0x10, 0x06, 0x50, 0x01, 0x60, 0x00, 0x88, 0x00,
	0xA0, 0x0F, 0x07, 0x00, 0x26, 0x00, 0x06, 0x00,
	0x3A, 0x00, 0x1B, 0x00, 0x1A, 0x00, 0x2A, 0x00,
	0x0A, 0x00, 0x0B, 0x00, 0x10, 0x02, 0x04, 0x00,
	0x13, 0x00, 0x32, 0x00, 0x03, 0x00, 0x1D, 0x00,
	0x12, 0x00, 0x90, 0x01, 0x0D, 0x00, 0x15, 0x00,
	0x05, 0x00, 0x19, 0x00, 0x08, 0x00, 0x78, 0x00,
	0xF0, 0x00, 0x70, 0x00, 0x90, 0x02, 0x10, 0x04,
	0x10, 0x00, 0xA0, 0x07, 0xA0, 0x0B, 0xA0, 0x03,
	0x40, 0x02, 0x40, 0x1C, 0x40, 0x0C, 0x40, 0x14,
	0x40, 0x04, 0x40, 0x18, 0x40, 0x08, 0x40, 0x10,
	0x40, 0x00, 0x80, 0x1F, 0x80, 0x0F, 0x80, 0x17,
	0x80, 0x07, 0x80, 0x1B, 0x80, 0x0B, 0x80, 0x13,
	0x80, 0x03, 0x80, 0x1D, 0x80, 0x0D, 0x80, 0x15,
	0x80, 0x05, 0x80, 0x19, 0x80, 0x09, 0x80, 0x11,
	0x80, 0x01, 0x80, 0x1E, 0x80, 0x0E, 0x80, 0x16,
	0x80, 0x06, 0x80, 0x1A, 0x80, 0x0A, 0x80, 0x12,
	0x80, 0x02, 0x80, 0x1C, 0x80, 0x0C, 0x80, 0x14,
	0x80, 0x04, 0x80, 0x18, 0x80, 0x08, 0x80, 0x10,
	0x80, 0x00, 0x00, 0x1F, 0x00, 0x0F, 0x00, 0x17,
	0x00, 0x07, 0x00, 0x1B, 0x00, 0x0B, 0x00, 0x13,
	0xA0, 0x0D, 0xA0, 0x05, 0xA0, 0x09, 0xA0, 0x01,
	0xA0, 0x0E, 0xA0, 0x06, 0xA0, 0x0A, 0xA0, 0x02,
	0xA0, 0x0C, 0xA0, 0x04, 0xA0, 0x08, 0xA0, 0x00,
	0x20, 0x0F, 0x20, 0x07, 0x20, 0x0B, 0x20, 0x03,
	0x20, 0x0D, 0x20, 0x05, 0x20, 0x09, 0x20, 0x01,
	0x20, 0x0E, 0x20, 0x06, 0x20, 0x0A, 0x20, 0x02,
	0x20, 0x0C, 0x20, 0x04, 0x20, 0x08, 0x20, 0x00,
	0xC0, 0x0F, 0xC0, 0x07, 0xC0, 0x0B, 0xC0, 0x03,
	0xC0, 0x0D, 0xC0, 0x05, 0xC0, 0x09, 0xC0, 0x01,
	0xC0, 0x0E, 0xC0, 0x06, 0xC0, 0x0A, 0xC0, 0x02,
	0xC0, 0x0C, 0xC0, 0x04, 0xC0, 0x08, 0xC0, 0x00,
	0x40, 0x0F, 0x40, 0x07, 0x40, 0x0B, 0x40, 0x03,
	0x00, 0x03, 0x40, 0x0D, 0x00, 0x1D, 0x00, 0x0D,
	0x00, 0x15, 0x40, 0x05, 0x00, 0x05, 0x00, 0x19,
	0x00, 0x09, 0x40, 0x09, 0x00, 0x11, 0x00, 0x01,
	0x00, 0x1E, 0x00, 0x0E, 0x40, 0x01, 0x00, 0x16,
	0x00, 0x06, 0x00, 0x1A, 0x40, 0x0E, 0x40, 0x06,
	0x40, 0x0A, 0x00, 0x0A, 0x00, 0x12, 0x00, 0x02,
	0x00, 0x1C, 0x00, 0x0C, 0x00, 0x14, 0x00, 0x04,
	0x00, 0x18, 0x00, 0x08, 0x00, 0x10, 0x00, 0x00
};

const UInt32 small_tbl1[90] =
{
	0x7,		0x8,		0x9,		0xA,		0xB,		0xC,		0xD,		0xE,		0x10,		0x11,
	0x13,		0x15,		0x17,		0x19,		0x1C,		0x1F,		0x22,		0x25,		0x29,		0x2D,
	0x32,		0x37,		0x3C,		0x42,		0x49,		0x50,		0x58,		0x61,		0x6B,		0x76,
	0x82,		0x8F,		0x9D,		0xAD,		0xBE,		0xD1,		0xE6,		0xFD,		0x117,		0x133,
	0x151,		0x173,		0x198,		0x1C1,		0x1EE,		0x220,		0x256,		0x292,		0x2D4,		0x31C,
	0x36C,		0x3C3,		0x424,		0x48E,		0x502,		0x583,		0x610,		0x6AB,		0x756,		0x812,
	0x8E0,		0x9C3,		0xABD,		0xBD0,		0xCFF,		0xE4C,		0xFBA,		0x114C,		0x1307,		0x14EE,
	0x1706,		0x1954,		0x1BDC,		0x1EA5,		0x21B6,		0x2515,		0x28CA,		0x2CDF,		0x315B,		0x364B,
	0x3BB9,		0x41B2,		0x4844,		0x4F7E,		0x5771,		0x602F,		0x69CE,		0x7462,		0x7FFF,		0x0
};

const UInt32 small_tbl2[32] =
{
	0xFFFFFFFF, 0x0, 0xFFFFFFFF, 0x4, 0xFFFFFFFF, 0x2, 0xFFFFFFFF, 0x6,
	0xFFFFFFFF, 0x1, 0xFFFFFFFF, 0x5, 0xFFFFFFFF, 0x3, 0xFFFFFFFF, 0x7,
	0xFFFFFFFF, 0x1, 0xFFFFFFFF, 0x5, 0xFFFFFFFF, 0x3, 0xFFFFFFFF, 0x7,
	0xFFFFFFFF, 0x2, 0xFFFFFFFF, 0x4, 0xFFFFFFFF, 0x6, 0xFFFFFFFF, 0x8
};
